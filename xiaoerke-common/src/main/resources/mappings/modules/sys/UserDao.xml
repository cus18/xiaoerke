<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cxqm.xiaoerke.modules.sys.dao.UserDao">

	<sql id="userColumns">
		a.id,
		a.company_id AS "company.id",
		a.office_id AS "office.id",
		a.login_name,
		a.password,
		a.no,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.remarks,
		a.login_flag,
		a.photo,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag,
		a.openid,
		c.name AS "company.name",
		c.parent_id AS "company.parent.id",
		c.parent_ids AS "company.parentIds",
		ca.id AS "company.area.id",
		ca.name AS "company.area.name",
		ca.parent_id AS "company.area.parent.id",
		ca.parent_ids AS "company.area.parentIds",
		o.name AS "office.name",
		o.parent_id AS "office.parent.id",
		o.parent_ids AS "office.parentIds",
		oa.id AS "office.area.id",
		oa.name AS "office.area.name",
		oa.parent_id AS "office.area.parent.id",
		oa.parent_ids AS "office.area.parentIds",
		cu.id AS "company.primaryPerson.id",
		cu.name AS "company.primaryPerson.name",
		cu2.id AS "company.deputyPerson.id",
		cu2.name AS "company.deputyPerson.name",
		ou.id AS "office.primaryPerson.id",
		ou.name AS "office.primaryPerson.name",
		ou2.id AS "office.deputyPerson.id",
		ou2.name AS "office.deputyPerson.name"<!-- ,
        r.id AS "roleList.id",
        r.office_id AS "roleList.office.id",
        r.name AS "roleList.name",
        r.enname AS "roleList.enname",
        r.role_type AS "roleList.roleType",
        r.data_scope AS "roleList.dataScope" -->
	</sql>

	<sql id="userJoins">
		JOIN sys_office c ON c.id = a.company_id
		JOIN sys_area ca ON ca.id = c.area_id
		JOIN sys_office o ON o.id = a.office_id
		JOIN sys_area oa ON oa.id = o.area_id
		LEFT JOIN sys_user cu ON cu.id = c.primary_person
		LEFT JOIN sys_user cu2 ON cu2.id = c.deputy_person
		LEFT JOIN sys_user ou ON ou.id = o.primary_person
		LEFT JOIN sys_user ou2 ON ou2.id = o.deputy_person<!-- 
		LEFT JOIN sys_user_role ur ON ur.user_id = a.id
        LEFT JOIN sys_role r ON r.id = ur.role_id -->
	</sql>

	<!-- 根据编号获得用户 -->
	<select id="get" resultType="User">
		SELECT
		<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		WHERE a.id = #{id}
	</select>

	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="User" parameterType="User">
		SELECT
		<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
	</select>

	<select id="getUserByLoginName"  resultType="java.util.HashMap">
		select * from sys_user where login_name=#{loginName}
	</select>

	<!-- 分页查询用户信息 -->
	<select id="findList" resultType="User">
		SELECT
		<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		<if test="role != null and role.id != null and role.id != ''">
			JOIN sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
		</if>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="company != null and company.id != null and company.id != ''">
			AND (c.id = #{company.id} OR c.parent_ids LIKE
			<if test="dbName == 'oracle'">'%,'||#{company.id}||',%')</if>
			<if test="dbName == 'mysql'">CONCAT('%,', #{company.id}, ',%'))</if>
		</if>
		<if test="office != null and office.id != null and office.id != ''">
			AND (o.id = #{office.id} OR o.parent_ids LIKE
			<if test="dbName == 'oracle'">'%,'||#{office.id}||',%')</if>
			<if test="dbName == 'mysql'">CONCAT('%,', #{office.id}, ',%'))</if>
		</if>
		<!-- 如果不是超级管理员，则不显示超级管理员用户 -->
		<if test="!currentUser.admin">
			AND a.id != '1'
		</if>
		<if test="loginName != null and loginName != ''">
			AND a.login_name like
			<if test="dbName == 'oracle'">'%'||#{loginName}||'%'</if>
			<if test="dbName == 'mysql'">CONCAT('%', #{loginName}, '%')</if>
		</if>
		<if test="name != null and name != ''">
			AND a.name like
			<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
			<if test="dbName == 'mysql'">CONCAT('%', #{name}, '%')</if>
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY c.code, o.code, a.name
			</otherwise>
		</choose>
	</select>

	<!-- 根据OfficeId获取用户（树查询用户时用） -->
	<select id="findUserByOfficeId" resultType="User" useCache="true">
		SELECT
			a.id, a.name, a.login_name
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.office_id = #{office.id}
		ORDER BY a.name
	</select>

	<!-- 根据type查询用户 -->
	<select id="findUserByUserType" resultType="User" parameterType="User" >
		SELECT * from sys_user where 1=1
		<if test="id != '' and id !=null">
			AND id = #{id}
		</if>
		<if test="userType != '' and userType != null">
			and (user_type = #{userType} or user_type = 'distributor')
		</if>
	</select>

	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="User">
		SELECT
		<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		ORDER BY c.code, o.code, a.name
	</select>

	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>

	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO sys_user(
			id, 
			company_id, 
			office_id, 
			login_name, 
			password, 
			no, 
			name, 
			email, 
			phone, 
			mobile, 
			user_type, 
			create_by, 
			create_date, 
			update_by, 
			update_date, 
			remarks, 
			login_flag, 
			photo,
			openid,
			del_flag,
			marketer
		) VALUES (
			#{id}, 
			#{company.id}, 
			#{office.id}, 
			#{loginName}, 
			#{password}, 
			#{no}, 
			#{name}, 
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{userType}, 
			#{createBy.id}, 
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{remarks}, 
			#{loginFlag},
			#{photo},
			#{openid},
			#{delFlag},
			#{marketer}
		)
	</insert>

	<!-- 更新用户 -->
	<update id="update">
		UPDATE sys_user SET 
			company_id = #{company.id}, 
			office_id = #{office.id}, 
			login_name = #{loginName}, 
			password = #{password}, 
			no = #{no}, 
			name = #{name}, 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			user_type = #{userType}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			login_flag = #{loginFlag},
			photo = #{photo},
			openid=#{openid}
		WHERE id = #{id}
	</update>

	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM sys_user_role WHERE user_id = #{id}
	</delete>

	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO sys_user_role(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id} FROM dual
		</foreach>
	</insert>

	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE sys_user SET 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			photo = #{photo}
		WHERE id = #{id}
	</update>

	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE sys_user SET 
			password = #{password} 
		WHERE id = #{id}
	</update>

	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE sys_user SET 
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>

	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE sys_user SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="checkUserAppointment" resultType="java.lang.Integer">
	 SELECT  count(id) num FROM ALREADY_APPOINTMENT AA WHERE AA.openid = #{openid}
	</select>


	<insert id="insertUserAppointmentNum">
		INSERT INTO ALREADY_APPOINTMENT(id,openid,create_time)VALUES (
			#{id},
			#{openid},
			now())
	</insert>

	<!--根据手机号获取患者id-->
	<select id="findPatientIdByPhoneExecute"  resultType="java.util.HashMap">
        SELECT su.id AS uid,sp.id AS spid FROM sys_user su ,  sys_patient sp
        where  su.id=sp.sys_user_id and su.phone=#{phone}
    </select>

	<!-- 根据条件修改用户sunxiao -->
	<update id="updateUserElementsExecute" parameterType="User">
		update sys_user su
		<set>
			<if test="phone != null and phone != ''">
				su.phone=#{phone},
			</if>
			<if test="name != null and name != ''">
				su.name=#{name},
			</if>
			<if test="email != null and email != ''">
				su.email=#{email},
			</if>
			<if test="userType != null and userType != ''">
				su.user_type=#{userType},
			</if>
			<if test="delFlag != null and delFlag != ''">
				su.del_flag=#{delFlag},
			</if>
		</set>
		where su.id=#{id}
	</update>

	<!--查询当前用户的所有信息(用户端) @author zdl-->
	<select id="findUserDetailInfoByUserIdExecute"  resultType="java.util.HashMap">
        SELECT * FROM sys_user WHERE id=#{userId}
    </select>

	<!-- 分页查询用户列表sunxiao -->
	<select id="findUserList" resultType="User">
		SELECT * from sys_user where del_flag = '0'
		<if test="id != '' and id !=null">
			AND id = #{id}
		</if>
		<if test="name != '' and name !=null">
			and name= #{name}
		</if>
		<if test="userType != '' and userType != null">
			<if test="userType == 'both'">
				and user_type in ('consultDoctor','distributor')
			</if>
			<if test="userType != 'both'">
				and user_type = #{userType}
			</if>
		</if>
	</select>
	<!-- 根据条件查询用户sunxiao -->
	<select id="getUserListByInfo" resultType="User" parameterType="java.util.HashMap">
		SELECT * from sys_user where del_flag = '0'
		<if test="id != '' and id !=null">
			AND id = #{id}
		</if>
		<if test="userType != '' and userType != null">
			and user_type = #{userType}
		</if>
		<if test="phone != '' and phone != null">
			and phone = #{phone}
		</if>
	</select>
</mapper>